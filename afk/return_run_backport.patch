--- data/afk/functions/as_player.mcfunction
+++ data/afk/functions/as_player.mcfunction
@@ -1,3 +1,5 @@
+scoreboard players set .as_player#has_branched afk.control_flow 0
+
 scoreboard players operation @s afk.rotation_prev = @s afk.rotation
 
 # Horizontal rotation alone is used to detect activity because it's functionally
@@ -11,6 +13,6 @@ execute if score @s afk matches 1.. run function afk:trigger
 # Joining the game always counts as activity, so the ticks inactive should be reset.
 # There isn't a way to detect joining directly, but you can detect leaving, so players
 # with a leave_game score must have joined since the last check.
-execute if score @s afk.left_game matches 1.. run return run function afk:player_joined
-execute if score @s afk.rotation = @s afk.rotation_prev run return run function afk:increment_ticks
-function afk:reset_player
+execute if score @s afk.left_game matches 1.. run function afk:player_joined
+execute if score .as_player#has_branched afk.control_flow matches 0 if score @s afk.rotation = @s afk.rotation_prev run function afk:increment_ticks
+execute if score .as_player#has_branched afk.control_flow matches 0 run function afk:reset_player

--- data/afk/functions/increment_ticks.mcfunction
+++ data/afk/functions/increment_ticks.mcfunction
@@ -4,3 +4,5 @@
 # If you update this, remember to update afk:loop!
 scoreboard players add @s afk.ticks 30
 execute if entity @s[tag=!afk] if score @s afk.ticks >= .threshold afk.settings at @s run function afk:tag/away
+
+scoreboard players set .as_player#has_branched afk.control_flow 1

--- data/afk/functions/player_joined.mcfunction
+++ data/afk/functions/player_joined.mcfunction
@@ -1,2 +1,4 @@
 function afk:reset_player
 scoreboard players reset @s afk.left_game
+
+scoreboard players set .as_player#has_branched afk.control_flow 1

--- data/afk/functions/load.mcfunction
+++ data/afk/functions/load.mcfunction
@@ -11,6 +11,7 @@ scoreboard objectives add afk.left_game minecraft.custom:minecraft.leave_game
 # Private API
 scoreboard objectives add afk.rotation dummy
 scoreboard objectives add afk.rotation_prev dummy
+scoreboard objectives add afk.control_flow dummy

 # .threshold is a user-configurable setting that controls how many seconds of inactivity
 # it takes for a player to become AFK. 3600 ticks is 180 seconds - this is a very intentional

--- data/afk/functions/uninstall.mcfunction
+++ data/afk/functions/uninstall.mcfunction
@@ -6,5 +6,6 @@ scoreboard objectives remove afk.rotation_prev
 scoreboard objectives remove afk.rotation
 scoreboard objectives remove afk.ticks
 scoreboard objectives remove afk.left_game
+scoreboard objectives remove afk.control_flow

 tag @a[tag=afk] remove afk
